{
  "fileName": "EngagementEventBasedClusterToTweetIndexFromBQ.scala",
  "filePath": "src/scala/com/twitter/simclusters_v2/scio/bq_generation/simclusters_index_generation/EngagementEventBasedClusterToTweetIndexFromBQ.scala",
  "url": "https://github.com/misbahsy/the-algorithm/src/scala/com/twitter/simclusters_v2/scio/bq_generation/simclusters_index_generation/EngagementEventBasedClusterToTweetIndexFromBQ.scala",
  "summary": "The code defines a Scala object called `EngagementEventBasedClusterToTweetIndexFromBQ` that contains several methods for generating a cluster-to-tweet index for the SimClusters algorithm. The SimClusters algorithm is a clustering algorithm used by Twitter to group similar tweets together. The cluster-to-tweet index generated by this code is used to map each cluster to its top K most engaging tweets.\n\nThe `getTweetInteractionTableWithFavCountFilter` method reads the user-tweet-interaction table and applies a tweet fav count filter. It returns the post-processed table results in SQL string format. The method takes three arguments: `startTime`, `endTime`, and `minFavCount`. `startTime` and `endTime` are the earliest and latest timestamps from the user-tweet-interaction table, respectively. `minFavCount` is an integer that specifies whether to enable tweet fav count filters. If `minFavCount` is greater than 0, the method applies the filter. Otherwise, it reads from the table without applying any filters.\n\nThe `getTweetInteractionTableWithHealthFilter` method reads the user-tweet-interaction table and applies health and video filters if specified. It returns the post-processed table results in SQL string format. The method takes four arguments: `tableName`, `startTime`, `endTime`, and `enableHealthAndVideoFilters`. `tableName` is the schema of the table. `startTime` and `endTime` are the earliest and latest timestamps from the user-tweet-interaction table, respectively. `enableHealthAndVideoFilters` is a boolean that specifies whether to enable health filters and video-only filters. If `enableHealthAndVideoFilters` is true, the method applies the filters. Otherwise, it reads from the table without applying any filters.\n\nThe `getTopKTweetsForClusterKeyBQ` method generates the SimClusters cluster-to-tweet index. It takes several arguments, including `queryTimestamp`, `maxTweetAgeHours`, `consumerEmbeddingsSQL`, `userTweetEngagementEventPairSqlPath`, `userTweetEngagementEventPairTemplateVariable`, `enableHealthAndVideoFilters`, `enableFavClusterTopKTweetsIntersection`, `minInteractionCount`, `minFavCount`, `tweetEmbeddingsLength`, `tweetEmbeddingsHalfLife`, `minEngagementPerCluster`, and `clusterTopKTweets`. The method defines template variables that are replaced in the corresponding SQL file. It then generates the SimClusters cluster-to-tweet index by reading from the user-tweet-interaction table and applying filters as specified by the arguments. If `enableFavClusterTopKTweetsIntersection` is true, the method generates a cluster-to-tweet index that intersects with a fav-based index. Otherwise, it generates a cluster-to-tweet index without the intersection.\n\nExample usage:\n```\nval sc: ScioContext = ...\nval queryTimestamp: DateTime = ...\nval maxTweetAgeHours: Int = ...\nval consumerEmbeddingsSQL: String = ...\nval userTweetEngagementEventPairSqlPath: String = ...\nval userTweetEngagementEventPairTemplateVariable: Map[String, String] = ...\nval enableHealthAndVideoFilters: Boolean = ...\nval enableFavClusterTopKTweetsIntersection: Boolean = ...\nval minInteractionCount: Int = ...\nval minFavCount: Int = ...\nval tweetEmbeddingsLength: Int = ...\nval tweetEmbeddingsHalfLife: Int = ...\nval minEngagementPerCluster: Int = ...\nval clusterTopKTweets: Int = ...\n\nval result: SCollection[TopKTweetsForClusterKey] =\n  EngagementEventBasedClusterToTweetIndexFromBQ.getTopKTweetsForClusterKeyBQ(\n    sc,\n    queryTimestamp,\n    maxTweetAgeHours,\n    consumerEmbeddingsSQL,\n    userTweetEngagementEventPairSqlPath,\n    userTweetEngagementEventPairTemplateVariable,\n    enableHealthAndVideoFilters,\n    enableFavClusterTopKTweetsIntersection,\n    minInteractionCount,\n    minFavCount,\n    tweetEmbeddingsLength,\n    tweetEmbeddingsHalfLife,\n    minEngagementPerCluster,\n    clusterTopKTweets\n  )\n```",
  "questions": "1. What is the purpose of this code and what does it do?\n- This code generates a cluster-to-tweet index for SimClusters using BigQuery. It reads user-tweet interaction data and applies filters based on tweet fav count and health/video content. It then generates a SQL query to generate the index and uses ScioContext to execute the query.\n\n2. What are the inputs and outputs of the `getTopKTweetsForClusterKeyBQ` function?\n- The inputs of the `getTopKTweetsForClusterKeyBQ` function include various parameters such as the query timestamp, max tweet age, SQL queries for user-tweet interaction data, and filter settings. The output of the function is an SCollection of TopKTweetsForClusterKey objects, which represent the top K tweets for each cluster.\n\n3. What is the purpose of the `generateClusterTopTweetIntersectionWithFavBasedIndexSQL` function?\n- The `generateClusterTopTweetIntersectionWithFavBasedIndexSQL` function generates a SQL query that filters the top K tweets for each cluster based on tweet fav count. This is used to generate a more accurate cluster-to-tweet index by only including tweets that have a certain level of engagement."
}