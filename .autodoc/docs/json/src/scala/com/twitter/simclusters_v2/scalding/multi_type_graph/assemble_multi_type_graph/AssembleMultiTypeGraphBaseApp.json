{
  "fileName": "AssembleMultiTypeGraphBaseApp.scala",
  "filePath": "src/scala/com/twitter/simclusters_v2/scalding/multi_type_graph/assemble_multi_type_graph/AssembleMultiTypeGraphBaseApp.scala",
  "url": "https://github.com/misbahsy/the-algorithm/src/scala/com/twitter/simclusters_v2/scalding/multi_type_graph/assemble_multi_type_graph/AssembleMultiTypeGraphBaseApp.scala",
  "summary": "The code in this file assembles a multi-type graph of user-entity engagement signals. The purpose of this code is to read datasets from multiple sources and generate a bipartite graph with LeftNode -> RightNode edges, capturing a user's engagement with varied entity types. The code produces three datasets as a result: FullGraph, TruncatedGraph, and TopKNouns.\n\nFullGraph is a dataset that reads datasets from multiple sources and generates a bipartite graph with LeftNode -> RightNode edges, capturing a user's engagement with varied entity types. TruncatedGraph is a truncated version of the FullGraph where only the topK most frequently occurring RightNodes in the bipartite graph LeftNode -> RightNode are stored. TopKNouns stores the topK most frequent Nouns for each engagement type. This dataset is currently only being used for the debugger to find which nodes are considered the most frequently occurring in FullGraph.\n\nThe code defines a trait called AssembleMultiTypeGraphBaseApp that extends DateRangeExecutionApp. It has several abstract values that are defined in the implementation of the trait. These values include truncatedMultiTypeGraphKeyValDataset, topKRightNounsKeyValDataset, fullMultiTypeGraphSnapshotDataset, isAdhoc, truncatedMultiTypeGraphMHOutputPath, topKRightNounsMHOutputPath, and fullMultiTypeGraphThriftOutputPath.\n\nThe code then defines several TypedPipe transformations that generate the FullGraph, TruncatedGraph, and TopKNouns datasets. The FullGraph dataset is generated by the getFullGraph() method, which reads datasets from multiple sources and generates a bipartite graph with LeftNode -> RightNode edges. The TruncatedGraph dataset is generated by the getTruncatedGraph() method, which takes the FullGraph and the topK most frequent Nouns for each engagement type and generates a truncated version of the FullGraph where only the topK most frequently occurring RightNodes in the bipartite graph LeftNode -> RightNode are stored. The TopKNouns dataset is generated by the getTopKRightNounsWithFrequencies() method, which takes the FullGraph, TopKConfig, and GlobalDefaultMinFrequencyOfRightNodeType and generates the topK most frequent Nouns for each engagement type.\n\nThe code then defines several WriteExecs that write the TruncatedGraph, TopKNouns, and FullGraph datasets to disk. The TruncatedGraph and TopKNouns datasets are written to DAL datasets, while the FullGraph dataset is written to a SnapshotDALDataset.\n\nOverall, this code assembles a multi-type graph of user-entity engagement signals by generating a bipartite graph with LeftNode -> RightNode edges, capturing a user's engagement with varied entity types. The code produces three datasets as a result: FullGraph, TruncatedGraph, and TopKNouns. These datasets are then written to disk using WriteExecs.",
  "questions": "1. What is the purpose of this code and what does it do?\n- This code assembles a multi-type graph of user-entity engagement signals by reading datasets from multiple sources and generating a bipartite graph with LeftNode -> RightNode edges, capturing a user's engagement with varied entity types. It produces three datasets: FullGraph, TruncatedGraph, and TopKNouns.\n2. What are the input and output formats of the produced datasets?\n- FullGraph is a SnapshotDALDataset of MultiTypeGraphEdge. TruncatedGraph is a KeyValDALDataset of KeyVal[LeftNode, RightNodeWithEdgeWeightList]. TopKNouns is a KeyValDALDataset of KeyVal[RightNodeTypeStruct, NounWithFrequencyList].\n3. What are the key transformations applied to the datasets before they are written to disk?\n- TruncatedGraph is keyed by LeftNode and TopKNouns is keyed by RightNodeNounType. The datasets are then written to disk using writeDALVersionedKeyValExecution or writeDALSnapshotExecution."
}