{
  "fileName": "DataSources.scala",
  "filePath": "src/scala/com/twitter/simclusters_v2/scalding/topic_recommendations/model_based_topic_recommendations/DataSources.scala",
  "url": "https://github.com/misbahsy/the-algorithm/src/scala/com/twitter/simclusters_v2/scalding/topic_recommendations/model_based_topic_recommendations/DataSources.scala",
  "summary": "The `DataSources` object in the `model_based_topic_recommendations` package is responsible for reading datasets required for model-based topic recommendations. The object contains two methods: `getUserInterestedInData` and `getPerLanguageTopicEmbeddings`.\n\nThe `getUserInterestedInData` method takes in a `DateRange`, `TimeZone`, and `UniqueID` as implicit parameters and returns a `TypedPipe` of `(UserId, Map[Int, Double])`. The method reads user interestedIn data from an external data source and filters out popular clusters (i.e., clusters with more than 5 million users interested in them) from the user embedding. The method then returns the fav-scores interestedIn embedding for the user.\n\nHere is an example of how to use the `getUserInterestedInData` method:\n\n```\nimport com.twitter.scalding.{DateRange, Days, TypedPipe, UniqueID}\nimport com.twitter.simclusters_v2.common.UserId\nimport com.twitter.simclusters_v2.scalding.topic_recommendations.model_based_topic_recommendations.DataSources\n\nimplicit val dateRange: DateRange = DateRange(Days(7))\nimplicit val timeZone: TimeZone = TimeZone.getTimeZone(\"UTC\")\nimplicit val uniqueID: UniqueID = UniqueID(\"12345\")\n\nval userInterestedInData: TypedPipe[(UserId, Map[Int, Double])] = DataSources.getUserInterestedInData\n```\n\nThe `getPerLanguageTopicEmbeddings` method takes in a `DateRange`, `TimeZone`, and `UniqueID` as implicit parameters and returns a `TypedPipe` of `((TopicId, Language), Map[Int, Double])`. The method reads the most recent snapshot of the FavTfgTopicEmbeddingsScalaDataset from the DAL (Data Access Layer) and filters out embeddings that are not of type `EmbeddingType.FavTfgTopic`. The method then returns the per-language topic embeddings.\n\nHere is an example of how to use the `getPerLanguageTopicEmbeddings` method:\n\n```\nimport com.twitter.scalding.{DateRange, Days, TypedPipe, UniqueID}\nimport com.twitter.simclusters_v2.common.{Language, TopicId}\nimport com.twitter.simclusters_v2.scalding.topic_recommendations.model_based_topic_recommendations.DataSources\n\nimplicit val dateRange: DateRange = DateRange(Days(7))\nimplicit val timeZone: TimeZone = TimeZone.getTimeZone(\"UTC\")\nimplicit val uniqueID: UniqueID = UniqueID(\"12345\")\n\nval perLanguageTopicEmbeddings: TypedPipe[((TopicId, Language), Map[Int, Double])] = DataSources.getPerLanguageTopicEmbeddings\n```\n\nIn summary, the `DataSources` object provides methods to read user interestedIn data and per-language topic embeddings required for model-based topic recommendations. These methods can be used in the larger project to generate topic recommendations for users based on their interests and the per-language topic embeddings.",
  "questions": "1. What is the purpose of this code and what problem does it solve?\n- This code defines a DataSources object that provides methods to read datasets for the model-based topic recommendations. It solves the problem of retrieving user interested-in data and per-language topic embeddings for the recommendation model.\n\n2. What external dependencies does this code have?\n- This code has external dependencies on Scalding, Scalding Internal, and SimClusters libraries. It also uses Java's TimeZone class.\n\n3. What is the significance of the `forceToDisk` method call in the `getPerLanguageTopicEmbeddings` method?\n- The `forceToDisk` method call is used to ensure that the TypedPipe resulting from the `map` operation is written to disk before being returned. This is necessary because the `collect` method that follows it requires a materialized TypedPipe."
}