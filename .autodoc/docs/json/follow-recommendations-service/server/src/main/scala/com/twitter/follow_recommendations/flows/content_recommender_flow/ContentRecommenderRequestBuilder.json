{
  "fileName": "ContentRecommenderRequestBuilder.scala",
  "filePath": "follow-recommendations-service/server/src/main/scala/com/twitter/follow_recommendations/flows/content_recommender_flow/ContentRecommenderRequestBuilder.scala",
  "url": "https://github.com/misbahsy/the-algorithm/follow-recommendations-service/server/src/main/scala/com/twitter/follow_recommendations/flows/content_recommender_flow/ContentRecommenderRequestBuilder.scala",
  "summary": "The `ContentRecommenderRequestBuilder` class is responsible for building a `ContentRecommenderRequest` object from a `ProductRequest` object. The `ContentRecommenderRequest` object is used to make recommendations for content to users based on their recent activity and location. \n\nThe `ContentRecommenderRequestBuilder` class has a constructor that takes in three clients (`SocialGraphClient`, `UserLocationFetcher`, and `UserStateClient`) and a `StatsReceiver` object. The `StatsReceiver` object is used to collect statistics about the performance of the code.\n\nThe `build` method takes in a `ProductRequest` object and returns a `Stitch[ContentRecommenderRequest]` object. The `Stitch` object is a monadic data structure that allows for the composition of asynchronous operations. \n\nThe `build` method first creates a `Stitch` object that collects the user state for the user specified in the `ProductRequest` object. It then creates a `Stitch` object that collects the recent followed user IDs for the user specified in the `ProductRequest` object. If the `GetFollowersFromSgs` parameter is set to true, it also creates a `Stitch` object that collects the recent followed by user IDs for the user specified in the `ProductRequest` object. If the `EnableInvalidRelationshipPredicate` parameter is set to true, it creates a `Stitch` object that collects the invalid relationship user IDs for the user specified in the `ProductRequest` object. Finally, it creates a `Stitch` object that collects the location for the user specified in the `ProductRequest` object.\n\nThe `Stitch` objects are then joined together using the `join` method. The `join` method takes in multiple `Stitch` objects and returns a new `Stitch` object that contains the results of all the `Stitch` objects. The `map` method is then called on the resulting `Stitch` object to create a new `ContentRecommenderRequest` object.\n\nThe `ContentRecommenderRequest` object contains information about the user's recent activity, location, and user state. This information is used to make recommendations for content to the user.\n\nExample usage:\n\n```scala\nval builder = new ContentRecommenderRequestBuilder(\n  socialGraphClient,\n  userLocationFetcher,\n  userStateClient,\n  statsReceiver\n)\n\nval productRequest = ProductRequest(\n  params = Map(\n    ContentRecommenderParams.RecentFollowingPredicateBudgetInMillisecond -> 1000,\n    ContentRecommenderParams.GetFollowersFromSgs -> true,\n    ContentRecommenderParams.EnableInvalidRelationshipPredicate -> true\n  ),\n  recommendationRequest = RecommendationRequest(\n    clientContext = ClientContext(\n      userId = Some(1234),\n      ipAddress = Some(\"127.0.0.1\")\n    ),\n    excludedIds = Some(Seq(5678)),\n    displayLocation = Some(\"US\"),\n    maxResults = Some(10),\n    debugParams = Some(DebugParams(debugOptions = Some(Seq(\"debug1\", \"debug2\"))))\n  )\n)\n\nval contentRecommenderRequest = builder.build(productRequest).get()\n```",
  "questions": "1. What is the purpose of this code and what problem does it solve?\n- This code is a request builder for a content recommender flow in a Twitter project. It collects various user data such as recent followed and followed-by user IDs, user location, and user state to build a ContentRecommenderRequest object.\n\n2. What external dependencies does this code have?\n- This code has external dependencies on several Twitter libraries such as `com.twitter.conversions.DurationOps`, `com.twitter.finagle.stats.StatsReceiver`, `com.twitter.follow_recommendations.common.clients.geoduck.UserLocationFetcher`, `com.twitter.follow_recommendations.common.clients.socialgraph.SocialGraphClient`, `com.twitter.follow_recommendations.common.clients.user_state.UserStateClient`, `com.twitter.follow_recommendations.common.utils.RescueWithStatsUtils`, `com.twitter.follow_recommendations.products.common.ProductRequest`, and `com.twitter.stitch.Stitch`.\n\n3. What is the purpose of the `@Singleton` and `@Inject` annotations?\n- The `@Singleton` annotation indicates that only one instance of this class will be created and shared across the application. The `@Inject` annotation is used to mark the constructor of this class as the one to be used by the dependency injection framework to provide the necessary dependencies for this class."
}